import socket
import struct

# C·∫•u h√¨nh ƒë·ªãa ch·ªâ multicast mDNS
MCAST_GRP = '224.0.0.251'
MCAST_PORT = 5353

# IP c·ª©ng c·ªßa Chromecast (l·∫•y t·ª´ TV)
CHROMECAST_IP = "10.5.20.85"

# Danh s√°ch c√°c thi·∫øt b·ªã ƒë√£ x√°c th·ª±c (Hardcode t·∫°m th·ªùi)
ALLOWED_DEVICES = ["10.3.0.246"]  # V√≠ d·ª•: ch·ªâ cho ph√©p thi·∫øt b·ªã n√†y g·ª≠i l·ªánh cast

# T·∫°o socket UDP ƒë·ªÉ nh·∫≠n multicast t·ª´ VLAN 3
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
sock.bind((MCAST_GRP, MCAST_PORT))

# Tham gia nh√≥m multicast tr√™n interface m·∫°ng
mreq = struct.pack("4sl", socket.inet_aton(MCAST_GRP), socket.INADDR_ANY)
sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)

print(f"üéß ƒêang l·∫Øng nghe multicast mDNS tr√™n {MCAST_GRP}:{MCAST_PORT}...")

# T·∫°o socket ƒë·ªÉ g·ª≠i g√≥i tin forward ƒë·∫øn Chromecast
forward_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

while True:
    data, addr = sock.recvfrom(1024)  # Nh·∫≠n d·ªØ li·ªáu t·ª´ multicast
    client_ip = addr[0]  # IP ngu·ªìn g·ª≠i g√≥i tin

    print(f"üì° Nh·∫≠n g√≥i tin t·ª´ {client_ip}: {data.hex()}")

    # Ki·ªÉm tra n·∫øu IP ngu·ªìn ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c
    if client_ip in ALLOWED_DEVICES:
        print(f"‚úÖ Thi·∫øt b·ªã {client_ip} ƒë√£ x√°c th·ª±c, forwarding ƒë·∫øn {CHROMECAST_IP}...")
        
        # Forward g√≥i tin multicast ƒë·∫øn Chromecast
        forward_sock.sendto(data, (CHROMECAST_IP, MCAST_PORT))
    else:
        print(f"‚ùå Thi·∫øt b·ªã {client_ip} ch∆∞a x√°c th·ª±c, b·ªè qua.")


auto eth1.3
iface eth1.3 inet static
    address 10.3.0.2
    netmask 255.255.255.0
    vlan-raw-device eth1

# C·∫•u h√¨nh VLAN eth1.5
auto eth1.5
iface eth1.5 inet static
    address 10.5.0.2
    netmask 255.255.0.0
    vlan-raw-device eth1